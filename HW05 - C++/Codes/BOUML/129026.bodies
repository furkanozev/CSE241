class PolygonVect
!!!141314.cpp!!!	~PolygonVect()

		shapes.clear();	
!!!141442.cpp!!!	PolygonVect(in new_shape : PolygonVect)

		int i = 0;
		size = new_shape.size;
		for(Point2D shape: new_shape.shapes)
		{
			shapes.push_back(shape);
			i++;
		}
		area_ = new_shape.area();
		perimeter_ = new_shape.perimeter();
		name = new_shape.getname();
		color = new_shape.getcolor();
!!!141570.cpp!!!	operator =(in new_shape : PolygonVect) : PolygonVect

		/* Deallocate old memory then allocate new memory and update size. After that copy points from parameter object */
		int i = 0;
		size = new_shape.size;
		shapes.clear();
		for(Point2D shape: new_shape.shapes)
		{
			shapes.push_back(shape);
			i++;
		}
		area_ = new_shape.area();
		perimeter_ = new_shape.perimeter();
		name = new_shape.getname();
		color = new_shape.getcolor();
		return *this;		// return this object
!!!141698.cpp!!!	PolygonVect()

		// size will be 0 and pointer will be null
		size = 0;
		area_ = 0;
		perimeter_ = 0;
		color = "blue";
!!!141826.cpp!!!	PolygonVect(in inners : vector<Point2D>)

		int i = 0;
		size = inners.size();		// assign size 
		for(Point2D shape: inners)
		{
			// Copy Point2D object from vector into Polygon object.
			shapes.push_back(shape);
			i++;
		}
		area_ = 0;
		perimeter_ = 0;
!!!141954.cpp!!!	PolygonVect(in shape : Point2D)

		// Allocate memory to 1 Point2D object then copy in array
		size = 1;		// size will be 1.
		shapes.push_back(shape);
		area_ = 0;
		perimeter_ = 0;
!!!142082.cpp!!!	PolygonVect(in shape : Rectangle)

		size = 4;		// size will be 4.
		// Allocate memory to 4 Point2D object then copy in array
		Point2D Points[4];
		Points[0].setx(shape.getposx());
		Points[0].sety(shape.getposy());
		Points[1].setx(shape.getposx() + shape.getwidth());
		Points[1].sety(shape.getposy());
		Points[2].setx(shape.getposx() + shape.getwidth());
		Points[2].sety(shape.getposy() + shape.getheight());
		Points[3].setx(shape.getposx());
		Points[3].sety(shape.getposy() + shape.getheight());
		for(int i=0; i<size; i++)
		{
			shapes.push_back(Points[i]);
		}
		area_ = shape.area();
		perimeter_ = shape.perimeter();
		color = shape.getcolor();
!!!142210.cpp!!!	PolygonVect(in shape : Circle)

		size = 100;		// size will be 100.
		double angle = 0;
		Point2D Points[100];
		for(int i=0; i<100; i++)
		{
			// Circle parametric equation
			//	x = cx + r * cos(a)
			//	y = cy + r * sin(a)	
			angle = (360.0/100) * i;
			Points[i].setx(shape.getcenterx() + shape.getradius() * cos(angle * PI / 180.0));
			Points[i].sety(shape.getcentery() + shape.getradius() * sin(angle * PI / 180.0));
			shapes.push_back(Points[i]);
		}
		area_ = shape.area();
		perimeter_ = shape.perimeter();
		color = shape.getcolor();
!!!142338.cpp!!!	PolygonVect(in shape : Triangle)

		size = 3;	// size will be 3.
		// Allocate memory to 3 Point2D object then copy in array
		Point2D Points[3];
		Points[0].setx(shape.getposx1());
		Points[0].sety(shape.getposy1());
		Points[1].setx(shape.getposx2());
		Points[1].sety(shape.getposy2());
		Points[2].setx(shape.getposx3());
		Points[2].sety(shape.getposy3());
		for(int i=0; i<size; i++)
		{
			shapes.push_back(Points[i]);
		}
		area_ = shape.area();
		perimeter_ = shape.perimeter();
		color = shape.getcolor();
!!!142466.cpp!!!	operator [](in index : int) : Point2D

		// error check
		try 
		{
			shapes.at(index);      // vector::at throws an out-of-range
		}
		catch (const std::out_of_range& oor)
		{
			std::cerr << "Out of Range error: " << oor.what() << '\n';
			exit(1);
		}
		
		return shapes[index];
!!!142594.cpp!!!	operator [](in index : int) : Point2D

    	// error check
		try 
		{
			shapes.at(index);      // vector::at throws an out-of-range
		}
		catch (const std::out_of_range& oor)
		{
			std::cerr << "Out of Range error: " << oor.what() << '\n';
			exit(1);
		}
		
		return shapes[index];
!!!142722.cpp!!!	get_size() : int

		return size;
!!!142850.cpp!!!	set_size(in number : int) : void

		size = number;
!!!142978.cpp!!!	perimeter() : double

		return perimeter_;
!!!143106.cpp!!!	area() : double

		return area_;
!!!143234.cpp!!!	set_area(in x : double) : void

		area_ = x;
!!!143362.cpp!!!	set_perimeter(in x : double) : void

		perimeter_ = x;
!!!143618.cpp!!!	operator ++(in  : int) : PolygonVect

		int i;
		for(i = 0 ; i < size ; i++)
		{
			shapes[i].setx(shapes[i].getx() + 1);
			shapes[i].sety(shapes[i].gety() + 1);
		}
		return (*this);
!!!143874.cpp!!!	operator --(in  : int) : PolygonVect

		for(int i = 0 ; i < size ; i++)
		{
			// position can not be negative.
			if(shapes[i].getx()-1>= 0 && shapes[i].gety()-1>= 0)
			{
				shapes[i].setx(shapes[i].getx() - 1);
				shapes[i].sety(shapes[i].gety() - 1);
			}
		}
		return (*this);
!!!144258.cpp!!!	getcolor() : string

		return color;
